from abc import ABC, abstractmethod
import json
import yaml 


class MyEntityRepBase(ABC):
    """Базовый класс для репозиториев с общей логикой работы с данными."""

    def __init__(self, file_path: str):
        self.file_path = file_path
        self.data = []
        self.load_data()

    @abstractmethod
    def load_data(self):
        """Загрузка данных из файла."""
        pass

    @abstractmethod
    def save_data(self):
        """Сохранение данных в файл."""
        pass

    def get_all(self) -> list:
        """Получить все объекты."""
        return self.data

    def get_by_id(self, entity_id: int) -> dict:
        """Получить объект по ID."""
        for entity in self.data:
            if entity.get("id") == entity_id:
                return entity
        raise ValueError(f"Объект с ID {entity_id} не найден.")

    def add_entity(self, entity: dict):
        """Добавить объект в репозиторий."""
        new_id = max((item["id"] for item in self.data), default=0) + 1
        entity["id"] = new_id
        self.data.append(entity)
        self.save_data()

    def delete_by_id(self, entity_id: int):
        """Удалить объект по ID."""
        self.data = [entity for entity in self.data if entity.get("id") != entity_id]
        self.save_data()

    def replace_by_id(self, entity_id: int, new_entity: dict):
        """Заменить объект по ID."""
        for index, entity in enumerate(self.data):
            if entity.get("id") == entity_id:
                new_entity["id"] = entity_id
                self.data[index] = new_entity
                self.save_data()
                return
        raise ValueError(f"Объект с ID {entity_id} не найден.")

    def get_k_n_short_list(self, k: int, n: int) -> list:
        """Получить k по счету n объектов."""
        start_index = (k - 1) * n
        return self.data[start_index:start_index + n]

    def sort_by_field(self, field: str):
        """Сортировать данные по указанному полю."""
        self.data.sort(key=lambda x: x.get(field))
        self.save_data()

    def get_count(self) -> int:
        """Получить количество объектов."""
        return len(self.data)
