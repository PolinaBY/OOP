import json

class MyEntityRepJson:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = []
        self.load_data()

    # a. Чтение всех значений из файла
    def load_data(self):
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
        except FileNotFoundError:
            self.data = []

    # b. Запись всех значений в файл
    def save_data(self):
        with open(self.file_path, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, indent=4, ensure_ascii=False)

    # c. Получить объект по ID
    def get_object_by_id(self, obj_id):
        for obj in self.data:
            if obj['id'] == obj_id:
                return obj
        return None

    # d. Получить список k по счету n объектов (например, вторые 20 элементов)
    def get_k_n_short_list(self, k, n):
        start = (k - 1) * n
        end = start + n
        return self.data[start:end]

    # e. Сортировать элементы по выбранному полю
    def sort_by_field(self, field):
        self.data.sort(key=lambda x: x.get(field, ''))

    # f. Добавить объект в список (при добавлении сформировать новый ID)
    def add_object(self, new_object):
        if len(self.data) > 0:
            max_id = max([obj['id'] for obj in self.data])
        else:
            max_id = 0
        new_object['id'] = max_id + 1
        self.data.append(new_object)
        self.save_data()

    # g. Заменить элемент списка по ID
    def update_object_by_id(self, obj_id, updated_object):
        for i, obj in enumerate(self.data):
            if obj['id'] == obj_id:
                updated_object['id'] = obj_id  # сохраняем ID при замене
                self.data[i] = updated_object
                self.save_data()
                return True
        return False

    # h. Удалить элемент списка по ID
    def delete_object_by_id(self, obj_id):
        for i, obj in enumerate(self.data):
            if obj['id'] == obj_id:
                del self.data[i]
                self.save_data()
                return True
        return False

    # i. Получить количество элементов
    def get_count(self):
        return len(self.data)

