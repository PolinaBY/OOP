import mysql.connector


class MyEntityRepDB:
    """Класс для работы с базой данных MySQL."""

    def __init__(self, host: str, user: str, password: str, database: str, table_name: str):
        self.connection = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        self.cursor = self.connection.cursor(dictionary=True)
        self.table_name = table_name

    def get_by_id(self, entity_id: int) -> dict:
        """Получить объект по ID."""
        query = f"SELECT * FROM {self.table_name} WHERE id = %s"
        self.cursor.execute(query, (entity_id,))
        result = self.cursor.fetchone()
        if not result:
            raise ValueError(f"Объект с ID {entity_id} не найден.")
        return result

    def get_k_n_short_list(self, k: int, n: int) -> list:
        """Получить k по счету n объектов."""
        offset = (k - 1) * n
        query = f"SELECT * FROM {self.table_name} LIMIT %s OFFSET %s"
        self.cursor.execute(query, (n, offset))
        return self.cursor.fetchall()

    def add_entity(self, entity: dict):
        """Добавить объект в список (сформировать новый ID)."""
        # Извлекаем все ключи и значения из переданного словаря
        columns = ", ".join(entity.keys())
        placeholders = ", ".join(["%s"] * len(entity))
        values = tuple(entity.values())

        query = f"INSERT INTO {self.table_name} ({columns}) VALUES ({placeholders})"
        self.cursor.execute(query, values)
        self.connection.commit()

    def replace_by_id(self, entity_id: int, new_entity: dict):
        """Заменить объект по ID."""
        # Формируем части запроса для обновления данных
        set_clause = ", ".join([f"{key} = %s" for key in new_entity.keys()])
        values = tuple(new_entity.values()) + (entity_id,)

        query = f"UPDATE {self.table_name} SET {set_clause} WHERE id = %s"
        self.cursor.execute(query, values)
        if self.cursor.rowcount == 0:
            raise ValueError(f"Объект с ID {entity_id} не найден.")
        self.connection.commit()

    def delete_by_id(self, entity_id: int):
        """Удалить объект по ID."""
        query = f"DELETE FROM {self.table_name} WHERE id = %s"
        self.cursor.execute(query, (entity_id,))
        if self.cursor.rowcount == 0:
            raise ValueError(f"Объект с ID {entity_id} не найден.")
        self.connection.commit()

    def get_count(self) -> int:
        """Получить количество элементов."""
        query = f"SELECT COUNT(*) AS count FROM {self.table_name}"
        self.cursor.execute(query)
        result = self.cursor.fetchone()
        return result['count'] if result else 0

    def close_connection(self):
        """Закрыть соединение с базой данных."""
        self.cursor.close()
        self.connection.close()
