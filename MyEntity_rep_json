import json
import yaml
import os

class BaseEntityRepository:
    """
    Базовый класс для работы с коллекцией объектов.
    Содержит общие методы для работы с данными (чтение, запись, добавление, сортировка).
    """
    def __init__(self, filepath: str):
        self.filepath = filepath
        self.data = self._load_from_file()

    def _load_from_file(self):
        """Метод для загрузки данных из файла. Реализуется в подклассах."""
        raise NotImplementedError

    def _save_to_file(self):
        """Метод для сохранения данных в файл. Реализуется в подклассах."""
        raise NotImplementedError

    def get_by_id(self, entity_id: int):
        """Получить объект по ID."""
        for entity in self.data:
            if entity['student_id'] == entity_id:
                return entity
        return None

    def get_k_n_short_list(self, k: int, n: int):
        """Получить список k по счету n объектов класса short."""
        start_index = (n - 1) * k
        end_index = start_index + k
        student_list = self.data[start_index:end_index]
        return [StudentBrief.from_json(json.dumps(student)).brief_info() for student in student_list]

    def sort_by_field(self, field: str = 'last_name'):
        """Сортировать элементы по выбранному полю."""
        try:
            self.data.sort(key=lambda x: x[field].lower())
            self._save_to_file()
        except KeyError:
            raise ValueError(f"Поле '{field}' не найдено в данных.")

    def add_entity(self, student: Student):
        """Добавить объект в список (при добавлении сформировать новый ID)."""
        new_id = max([s['student_id'] for s in self.data], default=0) + 1
        student.student_id = new_id
        self.data.append(student.__dict__)
        self._save_to_file()

    def replace_entity(self, student_id: int, new_student: Student):
        """Заменить элемент списка по ID."""
        for i, entity in enumerate(self.data):
            if entity['student_id'] == student_id:
                new_student.student_id = student_id
                self.data[i] = new_student.__dict__
                self._save_to_file()
                return
        raise ValueError(f"Студент с ID {student_id} не найден.")

    def delete_entity(self, student_id: int):
        """Удалить элемент списка по ID."""
        initial_count = len(self.data)
        self.data = [entity for entity in self.data if entity['student_id'] != student_id]
        if len(self.data) == initial_count:
            raise ValueError(f"Студент с ID {student_id} не найден.")
        self._save_to_file()

    def get_count(self):
        """Получить количество элементов."""
        return len(self.data)

class MyEntity_rep_json(BaseEntityRepository):
    """
    Класс для работы с коллекцией объектов (например, студентов), поддерживающий 
    операции чтения/записи в файл и различные функции управления.
    """
    
    # a. Чтение всех значений из файла
    def _load_from_file(self):
        if os.path.exists(self.filepath):
            with open(self.filepath, 'r', encoding='utf-8') as file:
                return json.load(file)
        return []

    # b. Запись всех значений в файл
    def _save_to_file(self):
        with open(self.filepath, 'w', encoding='utf-8') as file:
            json.dump(self.data, file, ensure_ascii=False, indent=4)

class MyEntity_rep_yaml(BaseEntityRepository):
    """
    Класс для работы с коллекцией объектов в формате YAML.
    Наследуется от BaseEntityRepository и реализует чтение/запись в формате YAML.
    """
    def _load_from_file(self):
        if os.path.exists(self.filepath):
            with open(self.filepath, 'r', encoding='utf-8') as file:
                return yaml.safe_load(file) or []
        return []

    def _save_to_file(self):
        with open(self.filepath, 'w', encoding='utf-8') as file:
            yaml.dump(self.data, file, allow_unicode=True, default_flow_style=False)
