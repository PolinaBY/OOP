import yaml


class MyEntityRepYaml:
    """Класс для работы с данными в формате YAML."""
    
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.data = self._load_data()

    def _load_data(self):
        """Приватный метод для загрузки данных из YAML файла."""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as file:
                return yaml.safe_load(file) or []
        except FileNotFoundError:
            return []
        except yaml.YAMLError as e:
            raise ValueError(f"Ошибка чтения YAML файла: {e}")

    def _save_data(self):
        """Приватный метод для сохранения данных в YAML файл."""
        with open(self.file_path, 'w', encoding='utf-8') as file:
            yaml.safe_dump(self.data, file, allow_unicode=True)

    def get_all(self):
        """Чтение всех значений из файла."""
        return self.data

    def get_by_id(self, entity_id: int):
        """Получить объект по ID."""
        return next((item for item in self.data if item.get('id') == entity_id), None)

    def add_entity(self, entity: dict):
        """Добавить объект в список, с автоматическим созданием нового ID."""
        max_id = max((item['id'] for item in self.data), default=0)
        entity['id'] = max_id + 1
        self.data.append(entity)
        self._save_data()

    def delete_by_id(self, entity_id: int):
        """Удалить объект из списка по ID."""
        self.data = [item for item in self.data if item.get('id') != entity_id]
        self._save_data()

    def replace_by_id(self, entity_id: int, new_entity: dict):
        """Заменить объект в списке по ID."""
        for i, item in enumerate(self.data):
            if item.get('id') == entity_id:
                self.data[i] = {**new_entity, 'id': entity_id}
                self._save_data()
                return
        raise ValueError(f"Объект с ID {entity_id} не найден.")

    def get_k_n_short_list(self, k: int, n: int):
        """Получить список k по счету n объектов."""
        start = (n - 1) * k
        end = start + k
        return self.data[start:end]

    def sort_by_field(self, field: str):
        """Сортировать элементы по выбранному полю."""
        self.data.sort(key=lambda x: x.get(field, ''))
        self._save_data()

    def get_count(self):
        """Получить количество элементов."""
        return len(self.data)
