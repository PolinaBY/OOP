sequenceDiagram
    participant User
    participant Main as Main:main()
    participant ApplicationController as ApplicationController:controller
    participant MainWindow as MainWindow:main_window
    participant Repository as Repository:repository_adapter
    participant AddStudentController as AddStudentController:add_controller
    participant EditStudentController as EditStudentController:edit_controller
    participant AddStudentWindow as AddStudentWindow:add_window
    participant EditStudentWindow as EditStudentWindow:edit_window
    participant StudentDetailsController as StudentDetailsController:controller
    participant DetailsWindow as DetailsWindow:details_window
    
    %% Инициализация приложения
    rect rgb(240, 260, 200)
    Note over User,DetailsWindow: Инициализация приложения
    User->>+Main: main()
    Main->>+Repository: StudentRepBase(strategy)
    Repository-->>-Main: return repository
    Main->>+ApplicationController: ApplicationController(repository)
    ApplicationController->>MainWindow: MainWindow()
    MainWindow-->>ApplicationController: return window
    ApplicationController->>Repository: add_observer(self)
    ApplicationController->>Repository: get_k_n_short_list(k, n, sort_field, sort_order)
    Repository-->>ApplicationController: return students[]
    ApplicationController->>MainWindow: update_students(students, total_items)
    Main->>ApplicationController: run()
    ApplicationController->>MainWindow: mainloop()
    MainWindow-->>User: display UI
    end
 
    %% Добавление студента
    rect rgb(250, 250, 200)
    Note over User,DetailsWindow: Добавление нового студента
    User->>MainWindow: click add_button
    MainWindow->>ApplicationController: handle_add()
    ApplicationController->>+AddStudentWindow: AddStudentWindow(parent)
    ApplicationController->>+AddStudentController: AddStudentController(view, repository_adapter)
    AddStudentWindow-->>User: display form
    User->>AddStudentWindow: input data
    User->>AddStudentWindow: click save_button
    AddStudentWindow->>AddStudentController: handle_save(data)
    AddStudentController->>Repository: add(student)
    Repository->>Repository: save_data()
    Repository->>ApplicationController: notify_observers()
    ApplicationController->>Repository: get_k_n_short_list(k, n, sort_field, sort_order)
    Repository-->>ApplicationController: return students[]
    ApplicationController->>MainWindow: update_students(students, total_items)
    MainWindow-->>User: update UI
    AddStudentWindow-->>User: destroy()
    end
 
    %% Редактирование студента
    rect rgb(240, 240, 200)
    Note over User,DetailsWindow: Редактирование студента
    User->>MainWindow: select student
    User->>MainWindow: click edit_button
    MainWindow->>ApplicationController: handle_edit()
    ApplicationController->>Repository: get_by_id(student_id)
    Repository-->>ApplicationController: return student
    ApplicationController->>+EditStudentWindow: EditStudentWindow(parent)
    ApplicationController->>+EditStudentController: EditStudentController(view, repository_adapter, student)
    EditStudentWindow->>EditStudentWindow: set_student_data(student)
    EditStudentWindow-->>User: display form
    User->>EditStudentWindow: modify data
    User->>EditStudentWindow: click save_button
    EditStudentWindow->>EditStudentController: handle_save(data)
    EditStudentController->>Repository: update_by_id(student_id, student)
    Repository->>Repository: save_data()
    Repository->>ApplicationController: notify_observers()
    ApplicationController->>Repository: get_k_n_short_list(k, n, sort_field, sort_order)
    Repository-->>ApplicationController: return students[]
    ApplicationController->>MainWindow: update_students(students, total_items)
    MainWindow-->>User: update UI
    EditStudentWindow-->>User: destroy()
    end
 
   %% Удаление студента
    rect rgb(220, 220, 200)
    Note over User,DetailsWindow: Удаление студента
    User->>MainWindow: select student
    User->>MainWindow: click delete_button
    MainWindow->>ApplicationController: handle_delete()
    ApplicationController->>MainWindow: show_confirmation("Вы уверены...")
    MainWindow-->>User: messagebox.askyesno()
    User->>MainWindow: confirm
    MainWindow->>ApplicationController: return True
    ApplicationController->>Repository: delete_by_id(student_id)
    Repository->>Repository: save_data()
    Repository->>ApplicationController: notify_observers()
    ApplicationController->>Repository: get_k_n_short_list(k, n, sort_field, sort_order)
    Repository-->>ApplicationController: return students[]
    ApplicationController->>MainWindow: update_students(students, total_items)
    MainWindow-->>User: update UI
    end
 
    %% Просмотр деталей
    rect rgb(230, 230, 200)
    Note over User,DetailsWindow: Просмотр деталей студента
    User->>MainWindow: select student
    User->>MainWindow: click view_button
    MainWindow->>ApplicationController: handle_view()
    ApplicationController->>Repository: get_by_id(student_id)
    Repository-->>ApplicationController: return student
    ApplicationController->>+DetailsWindow: StudentDetailsWindow(parent)
    ApplicationController->>+StudentDetailsController: StudentDetailsController(view, student)
    StudentDetailsController->>DetailsWindow: display_student(student)
    DetailsWindow-->>User: display details
    User->>DetailsWindow: click close_button
    DetailsWindow-->>User: destroy()
    end
    
    %% Сортировка
    rect rgb(200, 200, 200)
    Note over User,DetailsWindow: Сортировка студентов
    User->>MainWindow: select sort_combobox
    MainWindow->>ApplicationController: handle_sort(event)
    ApplicationController->>Repository: get_k_n_short_list(k, n, sort_field, sort_order)
    Repository-->>ApplicationController: return students[]
    ApplicationController->>MainWindow: update_students(students, total_items)
    MainWindow-->>User: update UI
    end
